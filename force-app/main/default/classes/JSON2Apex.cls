//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex {

	public class Pages {
        @AuraEnabled
		public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public Object next {get;set;} 
        @AuraEnabled
        public Integer page {get;set;} 
        @AuraEnabled
        public Integer per_page {get;set;} 
        @AuraEnabled
        public Integer total_pages {get;set;} 

		public Pages(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'next') {
							next = parser.readValueAs(Object.class);
						} else if (text == 'page') {
							page = parser.getIntegerValue();
						} else if (text == 'per_page') {
							per_page = parser.getIntegerValue();
						} else if (text == 'total_pages') {
							total_pages = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Pages consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    @AuraEnabled
	public Pages pages {get;set;} 
    @AuraEnabled
    public Integer total_count {get;set;} 
    @AuraEnabled
    public Boolean limited {get;set;} 
    @AuraEnabled
    public String type_Z {get;set;} // in json: type
    @AuraEnabled
    public List<Users> users {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'pages') {
						pages = new Pages(parser);
					} else if (text == 'total_count') {
						total_count = parser.getIntegerValue();
					} else if (text == 'limited') {
						limited = parser.getBooleanValue();
					} else if (text == 'type') {
						type_Z = parser.getText();
					} else if (text == 'users') {
						users = arrayOfUsers(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Companies_Z {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public List<Companies> companies {get;set;} 

		public Companies_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'companies') {
							companies = arrayOfCompanies(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Companies_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Location_data {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public String city_name {get;set;} 
        @AuraEnabled
        public String continent_code {get;set;} 
        @AuraEnabled
        public String country_name {get;set;} 
        @AuraEnabled
        public String postal_code {get;set;} 
        @AuraEnabled
        public String region_name {get;set;} 
        @AuraEnabled
        public String timezone {get;set;} 
        @AuraEnabled
        public String country_code {get;set;} 
        @AuraEnabled
        public Double latitude {get;set;} 
        @AuraEnabled
        public Double longitude {get;set;} 

		public Location_data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'city_name') {
							city_name = parser.getText();
						} else if (text == 'continent_code') {
							continent_code = parser.getText();
						} else if (text == 'country_name') {
							country_name = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'region_name') {
							region_name = parser.getText();
						} else if (text == 'timezone') {
							timezone = parser.getText();
						} else if (text == 'country_code') {
							country_code = parser.getText();
						} else if (text == 'latitude') {
							latitude = parser.getDoubleValue();
						} else if (text == 'longitude') {
							longitude = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Location_data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Companies {

		public Companies(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Companies consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Segments {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public List<Companies> segments {get;set;} 

		public Segments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'segments') {
							segments = arrayOfCompanies(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Segments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Users {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public String id {get;set;} 
        @AuraEnabled
        public String user_id {get;set;} 
        @AuraEnabled
        public String anonymous {get;set;} 
        @AuraEnabled
        public String email {get;set;} 
        @AuraEnabled
        public Object phone {get;set;} 
        @AuraEnabled
        public String name {get;set;} 
        @AuraEnabled
        public Object pseudonym {get;set;} 
        @AuraEnabled
        public Avatar avatar {get;set;} 
        @AuraEnabled
        public String app_id {get;set;} 
        @AuraEnabled
        public Companies_Z companies {get;set;} 
        @AuraEnabled
        public Location_data location_data {get;set;} 
        @AuraEnabled
        public Integer last_request_at {get;set;} 
        @AuraEnabled
        public Integer created_at {get;set;} 
        @AuraEnabled
        public Integer remote_created_at {get;set;} 
        @AuraEnabled
        public Integer signed_up_at {get;set;} 
        @AuraEnabled
        public Integer updated_at {get;set;} 
        @AuraEnabled
        public Integer session_count {get;set;} 
        @AuraEnabled
        public Social_profiles social_profiles {get;set;} 
        @AuraEnabled
        public Object owner_id {get;set;} 
        @AuraEnabled
        public Boolean unsubscribed_from_emails {get;set;} 
        @AuraEnabled
        public Boolean marked_email_as_spam {get;set;} 
        @AuraEnabled
        public Boolean has_hard_bounced {get;set;} 
        @AuraEnabled
        public Tags tags {get;set;} 
        @AuraEnabled
        public Segments segments {get;set;} 
        @AuraEnabled
        public Companies custom_attributes {get;set;} 
        @AuraEnabled
        public Object referrer {get;set;} 
        @AuraEnabled
        public Object utm_campaign {get;set;} 
        @AuraEnabled
        public Object utm_content {get;set;} 
        @AuraEnabled
        public Object utm_medium {get;set;} 
        @AuraEnabled
        public Object utm_source {get;set;} 
        @AuraEnabled
        public Object utm_term {get;set;} 
        @AuraEnabled
        public Object do_not_track {get;set;} 
        @AuraEnabled
        public Object last_seen_ip {get;set;} 
        @AuraEnabled
        public String user_agent_data {get;set;} 

		public Users(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'user_id') {
							user_id = parser.getText();
						} else if (text == 'anonymous') {
							anonymous = String.valueof(parser.getBooleanValue());
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'phone') {
							phone = parser.readValueAs(Object.class);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'pseudonym') {
							pseudonym = parser.readValueAs(Object.class);
						} else if (text == 'avatar') {
							avatar = new Avatar(parser);
						} else if (text == 'app_id') {
							app_id = parser.getText();
						} else if (text == 'companies') {
							companies = new Companies_Z(parser);
						} else if (text == 'location_data') {
							location_data = new Location_data(parser);
						} else if (text == 'last_request_at') {
							last_request_at = parser.getIntegerValue();
						} else if (text == 'created_at') {
							created_at = parser.getIntegerValue();
						} else if (text == 'remote_created_at') {
							remote_created_at = parser.getIntegerValue();
						} else if (text == 'signed_up_at') {
							signed_up_at = parser.getIntegerValue();
						} else if (text == 'updated_at') {
							updated_at = parser.getIntegerValue();
						} else if (text == 'session_count') {
							session_count = parser.getIntegerValue();
						} else if (text == 'social_profiles') {
							social_profiles = new Social_profiles(parser);
						} else if (text == 'owner_id') {
							owner_id = parser.readValueAs(Object.class);
						} else if (text == 'unsubscribed_from_emails') {
							unsubscribed_from_emails = parser.getBooleanValue();
						} else if (text == 'marked_email_as_spam') {
							marked_email_as_spam = parser.getBooleanValue();
						} else if (text == 'has_hard_bounced') {
							has_hard_bounced = parser.getBooleanValue();
						} else if (text == 'tags') {
							tags = new Tags(parser);
						} else if (text == 'segments') {
							segments = new Segments(parser);
						} else if (text == 'custom_attributes') {
							custom_attributes = new Companies(parser);
						} else if (text == 'referrer') {
							referrer = parser.readValueAs(Object.class);
						} else if (text == 'utm_campaign') {
							utm_campaign = parser.readValueAs(Object.class);
						} else if (text == 'utm_content') {
							utm_content = parser.readValueAs(Object.class);
						} else if (text == 'utm_medium') {
							utm_medium = parser.readValueAs(Object.class);
						} else if (text == 'utm_source') {
							utm_source = parser.readValueAs(Object.class);
						} else if (text == 'utm_term') {
							utm_term = parser.readValueAs(Object.class);
						} else if (text == 'do_not_track') {
							do_not_track = parser.readValueAs(Object.class);
						} else if (text == 'last_seen_ip') {
							last_seen_ip = parser.readValueAs(Object.class);
						} else if (text == 'user_agent_data') {
							user_agent_data = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Users consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Social_profiles {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public List<Companies> social_profiles {get;set;} 

		public Social_profiles(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'social_profiles') {
							social_profiles = arrayOfCompanies(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Social_profiles consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Avatar {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public Object image_url {get;set;} 

		public Avatar(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'image_url') {
							image_url = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Avatar consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Tags {
        @AuraEnabled
        public String type_Z {get;set;} // in json: type
        @AuraEnabled
        public List<Companies> tags {get;set;} 

		public Tags(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'tags') {
							tags = arrayOfCompanies(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Tags consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<Companies> arrayOfCompanies(System.JSONParser p) {
        List<Companies> res = new List<Companies>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Companies(p));
        }
        return res;
    }






    private static List<Users> arrayOfUsers(System.JSONParser p) {
        List<Users> res = new List<Users>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Users(p));
        }
        return res;
    }













}